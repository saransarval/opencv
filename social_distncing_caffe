# USAGE
# python real_time_object_detection.py --prototxt MobileNetSSD_deploy.prototxt.txt --model MobileNetSSD_deploy.caffemodel

# import the necessary packages
from imutils.video import VideoStream
from imutils.video import FPS
import numpy as np
import argparse
import imutils
import time
import cv2
from playsound import playsound
person_count =0
# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-p", "--prototxt", required=True,
	help="path to Caffe 'deploy' prototxt file")
ap.add_argument("-m", "--model", required=True,
	help="path to Caffe pre-trained model")
'''
ap.add_argument("-c", "--confidence", type=float, default=0.2,
	help="minimum probability to filter weak detections")
'''
args = vars(ap.parse_args())

# initialize the list of class labels MobileNet SSD was trained to
# detect, then generate a set of bounding box colors for each class
CLASSES = ["background", "aeroplane", "bicycle", "bird", "boat",
	"bottle", "bus", "car", "cat", "chair", "cow", "diningtable",
	"dog", "horse", "motorbike", "person", "pottedplant", "sheep",
	"sofa", "train", "tvmonitor"]
COLORS = np.random.uniform(0, 255, size=(len(CLASSES), 3))

# load our serialized model from disk
print("[INFO] loading model...")
proto_path = 'C:/Users/91720/PycharmProjects/yolo_obj_detection/MobileNetSSD_deploy.prototxt'
model_path = 'C:/Users/91720/PycharmProjects/yolo_obj_detection/MobileNetSSD_deploy.caffemodel'
#net = cv2.dnn.readNetFromCaffe('MobileNetSSD_deploy.prototxt','MobileNetSSD_deploy.caffemodel')
net = cv2.dnn.readNetFromCaffe( args["prototxt"],args["model"])
# initialize the video stream, allow the cammera sensor to warmup,
# and initialize the FPS counter
print("[INFO] starting video stream...")
vs = VideoStream(src=0).start()

# vs = VideoStream(usePiCamera=True).start()
time.sleep(2.0)
fps = FPS().start()

# loop over the frames from the video stream
while True:
	# grab the frame from the threaded video stream and resize it
	# to have a maximum width of 400 pixels
	frame = vs.read()
	frame = imutils.resize(frame, width=400)

	# grab the frame dimensions and convert it to a blob
	(h, w) = frame.shape[:2]
	blob = cv2.dnn.blobFromImage(cv2.resize(frame, (300, 300)),
		0.007843, (300, 300), 127.5)

	# pass the blob through the network and obtain the detections and
	# predictions
	net.setInput(blob)
	detections = net.forward()
	#print("detection data\n"+str(detections))
	#print("1st line   detection data\n"+str(detections[0,0,0,1]))
	#print("2st line   detection data" + str(detections[0, 0, 1, 1]))
	# loop over the detections
	cv2.imshow("Frame", frame)
	key = cv2.waitKey(1) & 0xFF
	####saravana##################### 1st, 2nd object detection with person class (15) and confidence level > 0.6
	if detections[0,0,0,1]==15 and detections[0,0,1,1]==15 and detections[0,0,0,2] > 0.6 and detections[0,0,1,2] >0.6:
		print("Person detected")
		if person_count >10:
			one_box_x1 = detections[0,0,0,3] * w
			one_box_y1 = detections[0,0,0,4] * h
			one_box_width_x2 = detections[0,0,0,5] * w
			one_box_height_y2 = detections[0,0,0,6] * h

			second_box_x1 = detections[0, 0, 1, 3] * w
			second_box_y1 = detections[0, 0, 1, 4] * h
			second_box_width_x2 = detections[0, 0, 1, 5] * w
			second_box_height_y2 = detections[0, 0, 1,6] * h
			print( " 1st person  x1 y1 x2 y2  \n",+one_box_x1,one_box_y1,one_box_width_x2,one_box_height_y2)
			print(" 2st person  x1 y1 x2 y2  \n", +second_box_x1, second_box_y1, second_box_width_x2, second_box_height_y2)

			find_distance_by_diffrence = second_box_x1 - one_box_width_x2
			print("distance value "+str(find_distance_by_diffrence))
			if find_distance_by_diffrence < 60:
				print(" Move Away ! Maintain Social  distance")
				playsound('alarm.mp3')
			else:
				continue
				#break

			print("Two  persons detected in the frame more than 10 times")
			person_count=0
			#break
		else:
			person_count+=1
	else:
		continue

	for i in np.arange(0, detections.shape[2]):
		# extract the confidence (i.e., probability) associated with
		# the prediction
		confidence = detections[0, 0, i, 2]

		# filter out weak detections by ensuring the `confidence` is
		# greater than the minimum confidence
		if confidence > 0.5:
			# extract the index of the class label from the
			# `detections`, then compute the (x, y)-coordinates of
			# the bounding box for the object
			idx = int(detections[0, 0, i, 1])

			#print("detection count"+str(idx))
			box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
			(startX, startY, endX, endY) = box.astype("int")
			#idxs = cv2.dnn.NMSBoxes(box, confidence, 0.5, 0.7)

			# draw the prediction on the frame
			label = "{}: {:.2f}%".format(CLASSES[idx],
				confidence * 100)
			#print("detected lable"+str(label))
			cv2.rectangle(frame, (startX, startY), (endX, endY),
				COLORS[idx], 2)
			y = startY - 15 if startY - 15 > 15 else startY + 15
			cv2.putText(frame, label, (startX, y),
				cv2.FONT_HERSHEY_SIMPLEX, 0.5, COLORS[idx], 2)
			#if CLASSES[idx] == 'person':
				#print(" person detected \t")
				#print("detection count"+str(len(idxs)))
				#print(startX,startY)



	# show the output frame
	#cv2.imshow("Frame", frame)
	#key = cv2.waitKey(1) & 0xFF

	# if the `q` key was pressed, break from the loop
	if key == ord("q"):
		break

	# update the FPS counter
	fps.update()

# stop the timer and display FPS information
fps.stop()
print("[INFO] elapsed time: {:.2f}".format(fps.elapsed()))
print("[INFO] approx. FPS: {:.2f}".format(fps.fps()))

# do a bit of cleanup
cv2.destroyAllWindows()
vs.stop()
